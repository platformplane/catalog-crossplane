apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: postgresqlservers.catalog.cluster.local
spec:
  compositeTypeRef:
    apiVersion: catalog.cluster.local/v1
    kind: PostgreSQLServerComposite

  writeConnectionSecretsToNamespace: crossplane-system # this writes the connection secrets listed in the below resources connectionDetails sections to the specified namespace as a combined secret of all resources https://docs.crossplane.io/knowledge-base/guides/connection-details/#connection-secrets-in-compositions
  # Be aware that you can't patch this field (it's in the composition, not in a resource or the composite)
  # The namespace where the user can get his combined secret (the same as this one) is specified implicitly by the claim's namespace if you set the writeConnectionSecretToRef.name in the claim (one could think that this field here is therefore not needed, but it is, without it, there is also no combined secret written to the claim's namespace)

  resources:
    - name: helm-release
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release # full example, see: https://github.com/crossplane-contrib/provider-helm/blob/master/examples/sample/release.yaml
        # metadata:
        #   annotations:
        #     crossplane.io/external-name: blarelease # affects only the Helm Release, not helm.crossplane.io Release
        spec:
          providerConfigRef:
            name: provider-helm
          forProvider:
            chart:
              name: postgresql
              repository: oci://registry-1.docker.io/bitnamicharts
              version: 14.0.5
            namespace: tbd # patch taken from composite spec.claimRef.namespace
            values:
              commonLabels:
                app: hallo # todo: maybe useful, there are for sure other values to set, and we should offer the from config option
              auth:
                database: postgres # patch taken from composite spec.claimRef.namespace
                # username: # maybe useful to set a custom username?
                # password:
              primary:
                persistence:
                  # enabled
                  size: 8Gi # patch taken from composite spec.size
                  # storageClass: # maybe useful to set a custom storage class?
                persistentVolumeClaimRetentionPolicy:
                  enabled: true
                  whenDeleted: Retain # patch taken from composite spec.pvcRetentionWhenDeleted (if set)

          # the connection details of this resource
          connectionDetails: # list the "secrets" created by this managed resources (further down, they are used to create the connection details for the whole composite)
            - apiVersion: v1
              kind: Secret
              name: # patch taken from composite spec.resourceRefs[0].name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: data.postgres-password
              toConnectionSecretKey: password

            - apiVersion: v1 # we do not use this IP, so we could remove it
              kind: Service
              name: # patch taken from composite spec.resourceRefs[0].name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: spec.clusterIP
              toConnectionSecretKey: host

            - apiVersion: v1
              kind: Service
              name: # patch taken from composite spec.resourceRefs[0].name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: spec.ports[0].port
              toConnectionSecretKey: port

            # - apiVersion: v1 # cannot find this resource, would anyways be super hacky
            #   kind: PostgreSQLServer
            #   name: postgresqlserver-sample
            #   namespace: test
            #   fieldPath: spec.writeConnectionSecretToRef.name
            #   toConnectionSecretKey: name

          writeConnectionSecretToRef: # this will write the above connection details from this resource to a secret with this name to the specified namespace (we actually need to write this so that we can reference this connection details in the combined connection details)
            # name: tbd # patch taken from composite spec.resourceRefs[0].name + "-binding" # not entirely sure what is going on here, it writes two secrets (two ending in -binding), if uncommented, only one with -binding but one that is called tbd
            namespace: tbd # patch taken from composite spec.claimRef.namespace

          publishConnectionDetailsTo:
            name: pg-secret
            configRef:
              name: default # the default secrets.crossplane.io StoreConfig is created during the installation of Crossplane

      # the "combined connection details" (combination of all the resources connection details)
      # Attention: add the items listed here as allowed ones in the definition
      connectionDetails:
        - name: type
          type: FromValue
          value: postgresql
        - name: provider
          type: FromValue
          value: platform
        - name: username
          type: FromValue
          value: postgres
        - name: password
          type: FromConnectionSecretKey
          fromConnectionSecretKey: password
        - name: port
          type: FromConnectionSecretKey
          fromConnectionSecretKey: port
        - name: database
          type: FromFieldPath
          fromFieldPath: "spec.forProvider.values.auth.database"
        - name: host
          type: FromFieldPath
          fromFieldPath: "metadata.annotations['host']"
          # type: FromConnectionSecretKey # in case we prefer the IP over the service name
          # fromConnectionSecretKey: host
        - name: uri
          type: FromFieldPath
          fromFieldPath: "metadata.annotations['uri']"

      patches:
        # give resources the namespace of the claim and a derived name
        - type: FromCompositeFieldPath # from composite (PostgreSQLServerComposite) to managed resource (Release)
          fromFieldPath: "spec.claimRef.namespace" # composite knows the claim via claimRef, I don't understand why metadata.namespace is not working
          toFieldPath: "spec.forProvider.namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name" # the Composite knows the Release name via resourceRefs
          toFieldPath: "spec.connectionDetails[0].name"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[0].namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name"
          toFieldPath: "spec.connectionDetails[1].name"
        
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[1].namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name"
          toFieldPath: "spec.connectionDetails[2].name"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[2].namespace"

        # set name and namespace to where we write the resource connection details
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.writeConnectionSecretToRef.namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name" # "spec.claimRef.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms: # not sure why two secrets are created :(
            - type: string
              string:
                type: Format
                fmt: "%s-binding" # renaming is needed in order not to overwrite the secret created by the chart (from where we take the db password)

        # get the values for the chart from the claim
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.pvcRetentionWhenDeleted"
          toFieldPath: "spec.forProvider.values.primary.persistentVolumeClaimRetentionPolicy.whenDeleted"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.size"
          toFieldPath: "spec.forProvider.values.primary.persistence.size"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.databaseName"
          toFieldPath: "spec.forProvider.values.auth.database"

        # set binding in resource label
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.writeConnectionSecretToRef.name" # that ugly uid (only the claim has the nice one, not the composite)
          toFieldPath: "metadata.labels['binding']"
        
        # set binding in claim status
        - type: ToCompositeFieldPath # when writing TO the composite, make sure that the definition mentions the target field
          fromFieldPath: "metadata.labels['binding']"
          toFieldPath: "status.binding.name"

        # - type: ToCompositeFieldPath # working
        #   fromFieldPath: metadata.name
        #   toFieldPath: metadata.labels['chartfullname']
        #   transforms:
        #     - type: string
        #       string:
        #         fmt: "%s-postgresqlserver" # maybe combine from Kind (lowercase?)

        # - type: ToCompositeFieldPath # not working
        #   fromFieldPath: metadata.namespace
        #   toFieldPath: metadata.labels['targetNamespace']

        # copy stuff from resource to claim status and back to resource annotations from where it is copied to the connection details # this must be the wrong way but I don't know how to do the string manipulations otherwise
        # Attention: newly introduced claim fields must be specified in the definition
        - type: CombineToComposite # make this dynamic...
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.forProvider.namespace
              - fromFieldPath: spec.forProvider.values.auth.database
            strategy: string
            string:
              fmt: "postgresql://postgres:pw@%s.%s:5432/%s" # TODO: add port and password
          toFieldPath: status.credentials.uri
          
        - type: FromCompositeFieldPath
          fromFieldPath: "status.credentials.uri"
          toFieldPath: "metadata.annotations['uri']"

        - type: CombineToComposite
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.forProvider.namespace
            strategy: string
            string:
              fmt: "%s.%s"
          toFieldPath: status.credentials.host
          
        - type: FromCompositeFieldPath
          fromFieldPath: "status.credentials.host"
          toFieldPath: "metadata.annotations['host']"

        # - type: FromCompositeFieldPath
        #   fromFieldPath: "spec.writeConnectionSecretToRef.name" # this is getting the wrong name, I can nowhere access the secret name from the claim.. 
        #   toFieldPath: "metadata.annotations['binding']"
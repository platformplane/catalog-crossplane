apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: postgresqlservers.catalog.cluster.local
spec:
  compositeTypeRef:
    apiVersion: catalog.cluster.local/v1
    kind: PostgreSQLServerComposite
  writeConnectionSecretsToNamespace: crossplane-system # this writes the connection secrets listed in the below resources connectionDetails sections to the specified namespace which is useful for compositions with multiple resources (to have one combined secret) https://docs.crossplane.io/knowledge-base/guides/connection-details/#connection-secrets-in-compositions

  resources:
    - name: helm-release
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release # full example, see: https://github.com/crossplane-contrib/provider-helm/blob/master/examples/sample/release.yaml
        spec:
          providerConfigRef:
            name: provider-helm
          forProvider:
            chart:
              name: postgresql
              repository: oci://registry-1.docker.io/bitnamicharts
              version: 14.0.5
            namespace: tbd # patch taken from composite spec.claimRef.namespace
            values:
              commonLabels:
                app: hallo # todo: maybe useful, there are for sure other values to set, and we should offer the from config option
              auth:
                database: postgres # patch taken from composite spec.claimRef.namespace
                # username: # maybe useful to set a custom username?
                # password:
              primary:
                persistence:
                  # enabled
                  size: 8Gi # patch taken from composite spec.size
                  # storageClass: # maybe useful to set a custom storage class?
                persistentVolumeClaimRetentionPolicy:
                  enabled: true
                  whenDeleted: Retain # patch taken from composite spec.pvcRetentionWhenDeleted (if set)

          connectionDetails: # list the "secrets" created by this managed resources (further down, they are used to create the connection details for the whole composite)
            - apiVersion: v1
              kind: Secret
              name: # patch taken from composite spec.resourceRefs[0].name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: data.postgres-password
              toConnectionSecretKey: password

            - apiVersion: v1
              kind: Service
              name: # patch taken from composite spec.resourceRefs[0].name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: spec.clusterIP
              toConnectionSecretKey: host

            - apiVersion: v1
              kind: Service
              name: # patch taken from composite spec.resourceRefs[0].name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: spec.ports[0].port
              toConnectionSecretKey: port

          writeConnectionSecretToRef: # this will write the above connection details from this resource to a secret with this name to the specified namespace
            name: # patch taken from composite spec.resourceRefs[0].name + "-binding"
            namespace: # patch taken from composite spec.claimRef.namespace

      connectionDetails:
        - name: type
          type: FromValue
          value: postgresql
        - name: username
          type: FromValue
          value: postgres
        - name: password
          type: FromConnectionSecretKey
          fromConnectionSecretKey: password
        - name: host
          type: FromConnectionSecretKey
          fromConnectionSecretKey: host
        - name: port
          type: FromConnectionSecretKey
          fromConnectionSecretKey: port
        - name: database
          type: FromFieldPath
          fromFieldPath: "spec.forProvider.values.auth.database"
        - name: uri
          type: FromFieldPath
          fromFieldPath: "metadata.annotations['uri']" # not working, probably patched too late, see below

      patches:
        # give resources the namespace of the claim and a derived name
        - type: FromCompositeFieldPath # from composite (PostgreSQLServerComposite) to managed resource (Release)
          fromFieldPath: "spec.claimRef.namespace" # composite knows the claim via claimRef, I don't understand why metadata.namespace is not working
          toFieldPath: "spec.forProvider.namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name" # the Composite knows the Release name via resourceRefs
          toFieldPath: "spec.connectionDetails[0].name"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[0].namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name"
          toFieldPath: "spec.connectionDetails[1].name"
        
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[1].namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name"
          toFieldPath: "spec.connectionDetails[2].name"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[2].namespace"

        # set name and namespace of resource connection details
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.writeConnectionSecretToRef.namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name" # "spec.claimRef.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms: # not sure why two secrets are created :(
            - type: string
              string:
                type: Format
                fmt: "%s-binding" # probably not needed, the other one is the binding

        # specify to which namespace the connection secrets should be written
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.writeConnectionSecretsToNamespace"

        # get the values for the chart from the claim
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.pvcRetentionWhenDeleted"
          toFieldPath: "spec.forProvider.values.primary.persistentVolumeClaimRetentionPolicy.whenDeleted"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.size"
          toFieldPath: "spec.forProvider.values.primary.persistence.size"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.databaseName"
          toFieldPath: "spec.forProvider.values.auth.database"

        # set binding label
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.writeConnectionSecretToRef.name"
          toFieldPath: "metadata.labels['binding']"
        
        # set binding in status
        - type: ToCompositeFieldPath # when writing TO the composite, take care that the definition mentions the target field
          fromFieldPath: "metadata.labels['binding']"
          toFieldPath: "status.binding.name"

        # - type: ToCompositeFieldPath # working
        #   fromFieldPath: metadata.name
        #   toFieldPath: metadata.labels['chartfullname']
        #   transforms:
        #     - type: string
        #       string:
        #         fmt: "%s-postgresqlserver" # maybe combine from Kind (lowercase?)

        # - type: ToCompositeFieldPath # not working
        #   fromFieldPath: metadata.namespace
        #   toFieldPath: metadata.labels['targetNamespace']

        - type: CombineToComposite # make this dynamic...
          combine:
            variables:
              - fromFieldPath: metadata.name
              - fromFieldPath: spec.forProvider.namespace
            strategy: string
            string:
              fmt: "postgresql://postgres:pw@%s.%s:5432/postgres"
          toFieldPath: status.uri
          
        - type: FromCompositeFieldPath
          fromFieldPath: "status.uri"
          toFieldPath: "metadata.annotations['uri']"

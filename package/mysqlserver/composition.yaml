# Composition Definition: https://doc.crds.dev/github.com/crossplane/crossplane/apiextensions.crossplane.io/Composition/v1@v1.15.0
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: mysqlservers.catalog.cluster.local
  annotations:
    catalog.cluster.local/title: "MySQL Server"
    catalog.cluster.local/description: "Unmanaged MySQL Server instance running within the cluster."
    catalog.cluster.local/icon: "PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIyNTYiIGhlaWdodD0iMTMzIiB2aWV3Qm94PSIwIDAgMjA0LjggMTA1Ljc2NSI+PHBhdGggZD0iTTAgOTYuMzM0aDYuNzQ3VjY5LjdsMTAuNDQ1IDIzLjIyN2MxLjIzMiAyLjggMi45MiAzLjgwNiA2LjIyOCAzLjgwNnM0LjkzLS45OTUgNi4xNjQtMy44MDZMNDAuMDMgNjkuN3YyNi42NDRoNi43NDh2LTI2LjZjMC0yLjU5NS0xLjA0LTMuODUtMy4xOC00LjQ5OC01LjEyNS0xLjYtOC41NjQtLjIxNi0xMC4xMiAzLjI0NGwtMTAuMjUgMjIuOTIzTDEzLjMgNjguNDhjLTEuNDkyLTMuNDYtNC45OTUtNC44NDQtMTAuMTItMy4yNDRDMS4wMzggNjUuODg1IDAgNjcuMTQgMCA2OS43MzR2MjYuNnptNTIuMzg2LTIxLjY4Nmg2Ljc0NXYxNC42OGMtLjA2My43OTguMjU2IDIuNjcgMy45NTIgMi43MjcgMS44ODYuMDMgMTQuNTU0IDAgMTQuNjcyIDB2LTE3LjQ4aDYuNzZjLjAzIDAtLjAwNyAyMy44MzQtLjAwNiAyMy45MzYuMDM3IDUuODc4LTcuMjk0IDcuMTU1LTEwLjY3MiA3LjI1NEg1Mi41MzN2LTQuNTRsMjEuMzQyLS4wMDFjNC4zNDItLjQ2IDMuODMtMi42MTcgMy44My0zLjM0NHYtMS43N2gtMTQuMzRjLTYuNjcyLS4wNi0xMC45Mi0yLjk3My0xMC45NzMtNi4zMjMtLjAwNS0uMy4xNDQtMTQuOTk1LS4wMDQtMTUuMTR6IiBmaWxsPSIjMDA2MThhIi8+PHBhdGggZD0iTTg5LjcxNiA5Ni4zMzRoMTkuMzk4YzIuMjcgMCA0LjQ3Ny0uNDc1IDYuMjMtMS4yOTggMi45Mi0xLjM0IDQuMzQ3LTMuMTU3IDQuMzQ3LTUuNTM2di00LjkzYzAtMS45NDctMS42MjItMy43NjMtNC44LTQuOTc0LTEuNjg3LS42NS0zLjc2My0uOTk1LTUuNzc0LS45OTVoLTguMTc1Yy0yLjcyNCAwLTQuMDIyLS44MjItNC4zNDYtMi42MzgtLjA2NS0uMjE2LS4wNjUtLjQtLjA2NS0uNjA2di0zLjA3YzAtLjE3MyAwLS4zNDcuMDY1LS41NjMuMzI0LTEuMzg0IDEuMDM4LTEuNzc0IDMuNDM4LTIgLjE5NSAwIC40NTQtLjA0NC42NS0uMDQ0aDE5LjI2OHYtNC40OTdoLTE4Ljk0NGMtMi43MjUgMC00LjE1Mi4xNzMtNS40NS41NjJDOTEuNTMyIDY3IDg5Ljc4IDY5IDg5Ljc4IDcyLjQ2djMuOTM2YzAgMy4wMjggMy40NCA1LjYyMyA5LjIxMiA2LjIyOC42NS4wNDMgMS4yOTguMDg2IDEuOTQ2LjA4Nmg3LjAwN2MuMjYgMCAuNTIgMCAuNzE0LjA0NCAyLjE0LjE3MyAzLjA1LjU2MiAzLjY5OCAxLjM0LjQuNC41Mi43OC41MiAxLjJ2My45MzZjMCAuNDc2LS4zMjQgMS4wODItLjk3MyAxLjYtLjU4NC41Mi0xLjU1Ny44NjUtMi44NTUuOTUyLS4yNiAwLS40NTQuMDQzLS43MTMuMDQzaC0xOC42MnY0LjQ5OHptNzIuMDY0LTcuODI4YzAgNC42MjggMy40MzggNy4yMjMgMTAuMzggNy43NDJhMjkuNDUgMjkuNDUgMCAwIDAgMS45NDYuMDg2aDE3LjU4MnYtNC40OThoLTE3LjcxMmMtMy45NTcgMC01LjQ1LS45OTUtNS40NS0zLjM3NHYtMjMuMjdoLTYuNzQ3djIzLjMxMnptLTM3Ljc4NS4yMzRWNzIuNzA1YzAtNC4wNzQgMi44Ni02LjU0NSA4LjUxNi03LjMyNWExMi45NCAxMi45NCAwIDAgMSAxLjgyMS0uMTNoMTIuODA3YTEzLjg3IDEzLjg3IDAgMCAxIDEuODg2LjEzYzUuNjU2Ljc4IDguNTE2IDMuMjUgOC41MTYgNy4zMjVWODguNzRjMCAzLjMwNS0xLjIxNSA1LjA3NC00LjAxNSA2LjIyN2w2LjY0NiA2aC03LjgzNGwtNS4zNzctNC44NTQtNS40MTMuMzQzaC03LjIxNmMtMS4yMzUgMC0yLjUzNS0uMTc0LTMuOTY2LS41NjQtNC4zLTEuMTctNi4zNy0zLjQyNC02LjM3LTcuMTUyem03LjI4My0uNGMwIC4yMTcuMDY1LjQzMy4xMy42OTQuNCAxLjg2NCAyLjE0NSAyLjkwNCA0LjggMi45MDRoNi4xM2wtNS42My01LjA4M2g3LjgzNGw0LjkgNC40MzNjLjkwNS0uNDgyIDEuNS0xLjIyIDEuNy0yLjE2Ny4wNjUtLjIxNi4wNjUtLjQzMy4wNjUtLjY1VjczLjA5NmMwLS4xNzMgMC0uNC0uMDY1LS42MDctLjQtMS43MzMtMi4xNDYtMi43My00Ljc0Ni0yLjczSDEzNi4yMmMtMyAwLTQuOTQgMS4zLTQuOTQgMy4zMzd2MTUuMjU2eiIgZmlsbD0iI2U0OGUwMCIvPjxnIGZpbGw9IiMwMDYxOGEiPjxwYXRoIGQ9Ik0xOTcuNjI0IDU3LjczYy00LjE0Ny0uMTEyLTcuMzE2LjI3My0xMC4wMjQgMS40MTUtLjc3LjMyNS0xLjk5Ny4zMzMtMi4xMjMgMS4yOTguNDIzLjQ0My40OSAxLjEwNS44MjUgMS42NS42NDcgMS4wNDcgMS43NCAyLjQ1IDIuNzEzIDMuMTg0IDEuMDY0LjgwMyAyLjE2IDEuNjYzIDMuMzAzIDIuMzYgMi4wMyAxLjIzOCA0LjI5NiAxLjk0NSA2LjI1IDMuMTg0IDEuMTUyLjczIDIuMjk2IDEuNjUgMy40MiAyLjQ3Ni41NTUuNDA4LjkzIDEuMDQyIDEuNjUgMS4yOTd2LS4xMThjLS4zOC0uNDgzLS40NzctMS4xNDctLjgyNS0xLjY1bC0xLjUzMy0xLjUzM2MtMS41LTItMy40MDItMy43MzctNS40MjUtNS4xOS0xLjYxMy0xLjE1OC01LjIyNC0yLjcyMi01Ljg5Ny00LjZsLS4xMTgtLjExOGMxLjE0NC0uMTMgMi40ODMtLjU0MyAzLjU0LS44MjUgMS43NzMtLjQ3NSAzLjM1OC0uMzUzIDUuMTktLjgyNWwyLjQ3Ny0uNzA4di0uNDcyYy0uOTI2LS45NS0xLjU4Ni0yLjIwNy0yLjU5NS0zLjA2Ni0yLjY0LTIuMjUtNS41MjMtNC40OTUtOC40OS02LjM3LTEuNjQ2LTEuMDQtMy42OC0xLjcxNC01LjQyNS0yLjU5NS0uNTg3LS4yOTYtMS42MTgtLjQ1LTIuMDA1LS45NDQtLjkxNi0xLjE2OC0xLjQxNS0yLjY1LTIuMTIyLTQtMS40OC0yLjg1LTIuOTM0LTUuOTY0LTQuMjQ2LTguOTYzLS44OTUtMi4wNDUtMS40OC00LjA2Mi0yLjU5NC01Ljg5Ny01LjM1NS04LjgwNC0xMS4xMi0xNC4xMTgtMjAuMDQ4LTE5LjM0LTEuOS0xLjExLTQuMTg3LTEuNTUtNi42MDUtMi4xMjNsLTMuODkyLS4yMzZjLS43OTItLjMzLTEuNjE2LTEuMy0yLjM2LTEuNzctMi45NTgtMS44Ny0xMC41NDUtNS45MzMtMTIuNzM2LS42LTEuMzgzIDMuMzczIDIuMDY3IDYuNjY0IDMuMzAyIDguMzc0Ljg2NiAxLjIgMS45NzYgMi41NDMgMi41OTQgMy44OTIuNDA3Ljg4Ni40NzggMS43NzUuODI2IDIuNzEzLjg1NyAyLjMgMS42MDMgNC44MjMgMi43MTIgNi45NTguNTYgMS4wOCAxLjE3OCAyLjIxOCAxLjg4NyAzLjE4NC40MzUuNTkzIDEuMTguODU0IDEuMjk3IDEuNzctLjcyOCAxLjAyLS43NyAyLjYtMS4xOCAzLjg5Mi0xLjg0MyA1LjgxMi0xLjE0OCAxMy4wMzUgMS41MzMgMTcuMzM3LjgyMyAxLjMyIDIuNzYgNC4xNTIgNS40MjUgMy4wNjYgMi4zMy0uOTUgMS44LTMuODkgMi40NzctNi40ODYuMTUtLjU5LjA1OC0xLjAyLjM1NC0xLjQxNXYuMTE4bDIuMTIzIDQuMjQ1YzEuNTcgMi41MyA0LjM2IDUuMTc1IDYuNzIyIDYuOTYgMS4yMjUuOTI1IDIuMiAyLjUyNSAzLjc3NCAzLjA2NnYtLjExOGgtLjExOGMtLjMwNy0uNDgtLjc4Ny0uNjc3LTEuMTgtMS4wNi0uOTIzLS45MDUtMS45NS0yLjAzLTIuNzEzLTMuMDY2LTIuMTUtMi45MTgtNC4wNDgtNi4xMS01Ljc3OC05LjQzNS0uODI2LTEuNTg3LTEuNTQ1LTMuMzM4LTIuMjQtNC45NTMtLjI2OC0uNjIzLS4yNjUtMS41NjQtLjgyNS0xLjg4Ny0uNzYzIDEuMTg0LTEuODg3IDIuMTQtMi40NzcgMy41MzgtLjk0NCAyLjIzNC0xLjA2NiA0Ljk1OC0xLjQxNSA3Ljc4NC0uMjA3LjA3NC0uMTE1LjAyMy0uMjM2LjExOC0xLjY0Mi0uMzk2LTIuMjItMi4wODctMi44My0zLjUzOC0xLjU0NC0zLjY3LTEuODMtOS41NzYtLjQ3Mi0xMy43OTguMzUtMS4wOTIgMS45NC00LjUzNCAxLjI5Ny01LjU0My0uMzA3LTEuMDA3LTEuMzItMS42LTEuODg3LTIuMzYtLjctLjk1LTEuNDAyLTIuMjA0LTEuODg3LTMuMzAyLTEuMjY0LTIuODYtMS44NTQtNi4wNy0zLjE4NC04Ljk2My0uNjM2LTEuMzgyLTEuNzEtMi43OC0yLjU5NC00LS45NzgtMS4zNi0yLjA3My0yLjM2NC0yLjgzLTQtLjI3LS41ODUtLjYzNi0xLjUyLS4yMzYtMi4xMjNhLjkzLjkzIDAgMCAxIC43MDgtLjcwOGMuNjg0LS41MjcgMi41OS4xNzUgMy4zMDIuNDcyIDEuODkuNzg2IDMuNDcgMS41MzQgNS4wNzIgMi41OTUuNzcuNSAxLjU0NyAxLjQ5NiAyLjQ3NiAxLjc3aDEuMDZjMS42Ni4zODIgMy41Mi4xMiA1LjA3LjU5IDIuNzQyLjgzMyA1LjE5OCAyLjEzIDcuNDMgMy41MzggNi43OTggNC4yOTIgMTIuMzU1IDEwLjQwMiAxNi4xNTcgMTcuNy42MTIgMS4xNzMuODc2IDIuMjk0IDEuNDE1IDMuNTM4IDEuMDg3IDIuNSAyLjQ1NiA1LjA5MyAzLjUzOCA3LjU0NyAxLjA4IDIuNDUgMi4xMyA0LjkyIDMuNjU2IDYuOTU4LjgwMiAxLjA3IDMuOSAxLjY0NiA1LjMwNyAyLjI0Ljk4Ny40MTcgMi42MDMuODUyIDMuNTM4IDEuNDE1IDEuNzg1IDEuMDc3IDMuNTE1IDIuMzYgNS4xOSAzLjU0LjgzNy41OSAzLjQxIDEuODgzIDMuNTM4IDIuOTQ4eiIvPjxwYXRoIGQ9Ik0xNDQuOTEgMTIuNzk4Yy0uODY1LS4wMTYtMS40NzYuMDk0LTIuMTIzLjIzNnYuMTE4aC4xMThjLjQxMi44NDggMS4xNCAxLjM5MyAxLjY1IDIuMTIzbDEuMTggMi40NzYuMTE4LS4xMThjLjczLS41MTUgMS4wNjUtMS4zMzggMS4wNi0yLjU5NS0uMjkzLS4zMDgtLjMzNi0uNjk0LS41OS0xLjA2Mi0uMzM3LS40OS0xLS43NjgtMS40MTUtMS4xOHoiIGZpbGwtcnVsZT0iZXZlbm9kZCIvPjwvZz48cGF0aCBkPSJNMTk0Ljg1NSA5MS43MDhjMCAyLjk3IDIuMzQ3IDQuOTcyIDQuOTcyIDQuOTcyczQuOTcyLTIuMDAyIDQuOTcyLTQuOTcyLTIuMzQ3LTQuOTcyLTQuOTcyLTQuOTcyLTQuOTcyIDIuMDAyLTQuOTcyIDQuOTcyem04LjgzIDBjMCAyLjI1NC0xLjcyMyAzLjkzOC0zLjg2IDMuOTM4LTIuMTYgMC0zLjg2LTEuNjg0LTMuODYtMy45MzhzMS42OTgtMy45MzggMy44Ni0zLjkzOGMyLjEzNSAwIDMuODYgMS42ODQgMy44NiAzLjkzOHptLTIuNTIgMi44MzhoMS4xMTNsLTEuNjMtMi40OTJjLjg3NS0uMDkzIDEuNTM3LS41MTggMS41MzctMS41NTIgMC0xLjE1NC0uNzMtMS42My0yLjEzNC0xLjYzaC0yLjIxNXY1LjY3NWguOTU1di0yLjQ1M2guODg4bDEuNDg1IDIuNDUzem0tMi4zNzQtMy4yNXYtMS42M2gxLjFjLjU3IDAgMS4yNi4xMDYgMS4yNi43NyAwIC43OTUtLjYyMy44NjItMS4zNC44NjJoLTEuMDJ6IiBmaWxsPSIjZTQ4ZTAwIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiLz48L3N2Zz4="
    catalog.cluster.local/maintainer: ""
    catalog.cluster.local/url: "https://www.mysql.com/"
    catalog.cluster.local/tags: "database,unmanaged,helm"
spec:
  compositeTypeRef:
    apiVersion: catalog.cluster.local/v1
    kind: MySQLServerComposite

  writeConnectionSecretsToNamespace: crossplane-system # this writes the connection secrets listed in the below resources connectionDetails sections to the specified namespace as a combined secret of all resources https://docs.crossplane.io/knowledge-base/guides/connection-details/#connection-secrets-in-compositions
  # Be aware that you can't patch this field (it's in the composition, not in a resource or the composite)
  # The namespace where the user can get his combined secret (the same as this one) is specified implicitly by the claim's namespace if you set the writeConnectionSecretToRef.name in the claim (one could think that this field here is therefore not needed, but it is, without it, there is also no combined secret written to the claim's namespace)

  resources:
    - name: helm-release # definition: https://doc.crds.dev/github.com/crossplane-contrib/provider-helm/helm.crossplane.io/Release/v1beta1@v0.15.0
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release # full example, see: https://github.com/crossplane-contrib/provider-helm/blob/master/examples/sample/release.yaml
        spec:
          providerConfigRef:
            name: provider-helm
          forProvider:
            chart:
              name: mysql
              repository: oci://registry-1.docker.io/bitnamicharts
              version: 10.1.0
            namespace: tbd # patch taken from composite spec.claimRef.namespace
            values:
              commonLabels:
                catalog.cluster.local/kind: tbd # patch taken from composite spec.claimRef.kind
                catalog.cluster.local/name: tbd # patch taken from composite spec.claimRef.name
              fullnameOverride: tbd # patch taken from composite metadata.name (needed because the chart creates a secret with an unpredictable name otherwise)
              architecture: standalone
              auth:
                database: db
              primary:
                persistence:
                  size: 8Gi # patch taken from composite spec.size
                persistentVolumeClaimRetentionPolicy:
                  enabled: true
                  whenDeleted: Delete
              metrics:
                enabled: true
                serviceMonitor:
                  enabled: true

          # the connection details of this resource
          connectionDetails: # list the "secrets" created by this managed resources (further down, they are used to create the connection details for the whole composite)
            - apiVersion: v1
              kind: Secret
              name: # patch taken from spec.claimRef.name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: data.mysql-root-password
              toConnectionSecretKey: password

            - apiVersion: v1
              kind: Service
              name: # patch taken from spec.claimRef.name
              namespace: # patch taken from composite spec.claimRef.namespace
              fieldPath: spec.ports[0].port
              toConnectionSecretKey: port

          writeConnectionSecretToRef: # this will write the above connection details from this resource to a secret with this name to the specified namespace (we actually need to write this so that we can reference this connection details in the combined connection details)
            # name: tbd # patch taken from composite spec.resourceRefs[0].name + "-connection" # not entirely sure what is going on here, it writes two secrets (two ending in -connection), if uncommented only one with -connection but one that is called tbd
            namespace: tbd # patch taken from composite spec.claimRef.namespace

      # connection secrets mentioned here will be added to the "combined connection details" (combination of all the resources connection details)
      # Attention: add the items listed here as allowed ones in the definition
      connectionDetails:
        - name: username
          type: FromValue
          value: root

        - name: password
          type: FromConnectionSecretKey
          fromConnectionSecretKey: password

        - name: port
          type: FromConnectionSecretKey
          fromConnectionSecretKey: port

        - name: database
          type: FromFieldPath
          fromFieldPath: "spec.forProvider.values.auth.database"

        - name: host
          type: FromFieldPath
          fromFieldPath: "metadata.annotations['host']"

      # copy stuff from claim/composite to resource (Release) and the other way around
      patches:
        # get the values for the chart from the claim
        - type: FromCompositeFieldPath # from composite (MySQLServerComposite) to managed resource (Release)
          fromFieldPath: "spec.size"
          toFieldPath: "spec.forProvider.values.primary.persistence.size"

        # - type: FromCompositeFieldPath
        #   fromFieldPath: "spec.databaseName"
        #   toFieldPath: "spec.forProvider.values.auth.database"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.values.fullnameOverride"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.forProvider.values.commonLabels['catalog.cluster.local/name']"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.kind"
          toFieldPath: "spec.forProvider.values.commonLabels['catalog.cluster.local/kind']"

        # give resources (service, secrets, ...) the name and namespace of the claim
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.forProvider.namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.connectionDetails[0].name"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[0].namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.name"
          toFieldPath: "spec.connectionDetails[1].name"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.connectionDetails[1].namespace"

        # set name and namespace to where we write the resource connection details
        - type: FromCompositeFieldPath
          fromFieldPath: "spec.claimRef.namespace"
          toFieldPath: "spec.writeConnectionSecretToRef.namespace"

        - type: FromCompositeFieldPath
          fromFieldPath: "spec.resourceRefs[0].name" # "spec.claimRef.name"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms: # not sure why two secrets are created :(
            - type: string
              string:
                type: Format
                fmt: "%s-connection" # renaming is needed in order not to overwrite the secret created by the chart (from where we take the db password)

        # copy stuff from resource to claim status and back to resource annotations from where it is copied to the connection details # this must be the wrong way but I don't know how to do the string manipulations otherwise
        # Attention: newly introduced claim fields must be specified in the definition
        - type: CombineToComposite
          combine:
            variables:
              - fromFieldPath: spec.forProvider.values.fullnameOverride
              - fromFieldPath: spec.forProvider.namespace
            strategy: string
            string:
              fmt: "%s.%s"
          toFieldPath: status.credentials.host

        - type: FromCompositeFieldPath
          fromFieldPath: "status.credentials.host"
          toFieldPath: "metadata.annotations['host']"

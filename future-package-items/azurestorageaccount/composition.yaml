apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: azurestorageaccounts.catalog.cluster.local
spec:
  compositeTypeRef:
    apiVersion: catalog.cluster.local/v1
    kind: AzureStorageAccountComposite

  writeConnectionSecretsToNamespace: crossplane-system

  mode: Pipeline
  pipeline:
    - step: storage-account
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "info" # this name is referenced later on again
            spec:
              providerConfigRef:
                name: provider-kubernetes
              forProvider:
                manifest: # kubectl create configmap cluster-info --from-literal=resourcegroup=i-li-rgr-platformplane-crossplane-test -n crossplane-system
                  apiVersion: v1
                  kind: ConfigMap
                  metadata:
                    name: cluster-info
                    namespace: crossplane-system
              managementPolicies: ["Observe"]
            ---
            apiVersion: storage.azure.upbound.io/v1beta1
            kind: Account # https://marketplace.upbound.io/providers/upbound/provider-azure-storage/v1.0.1/resources/storage.azure.upbound.io/Account/v1beta1
            metadata:
            {{ if eq $.observed.composite.resource.spec.claimRef nil }}
              name: {} # "Account name taken from Composite claimRef is not yet available."
            {{ else }}
              name: {{ .observed.composite.resource.spec.claimRef.name }}
            {{ end }}
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "account"
            {{ if eq $.observed.composite.resource.spec.claimRef nil }}
                crossplane.io/external-name: {}
            {{ else }}
                crossplane.io/external-name: {{ regexReplaceAll "[^a-z0-9]" (printf "%s" .observed.composite.resource.metadata.uid | lower) ""  | trunc 24 }}
            {{ end }}
            spec:
              forProvider:
            {{ if eq $.observed.resources.info nil }}
                resourceGroupName: {} # "ConfigMap info not (yet) available."
            {{ else }}
                resourceGroupName: {{ .observed.resources.info.resource.status.atProvider.manifest.data.resourcegroup }}
            {{ end }}
                accountTier: Standard
                accountReplicationType: LRS
                location: Switzerland North
              writeConnectionSecretToRef:
                namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
                name: {{ .observed.composite.resource.spec.claimRef.name }}-connection
            ---
            apiVersion: meta.gotemplating.fn.crossplane.io/v1alpha1
            kind: CompositeConnectionDetails
            {{ if eq $.observed.resources nil }}
            data: {}
            {{ else }}
            data:
              attribute.primary_access_key: {{ dig "resources" "account" "connectionDetails" "attribute.primary_access_key" "" .observed }}
              attribute.primary_blob_connection_string: {{ dig "resources" "account" "connectionDetails" "attribute.primary_blob_connection_string" "" .observed }}
              attribute.primary_connection_string: {{ dig "resources" "account" "connectionDetails" "attribute.primary_connection_string" "" .observed }}
            {{ end }}

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready

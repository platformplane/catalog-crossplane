# Composition Definition: https://doc.crds.dev/github.com/crossplane/crossplane/apiextensions.crossplane.io/Composition/v1@v1.15.0
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: mssqls.catalog.cluster.local
spec:
  compositeTypeRef:
    apiVersion: catalog.cluster.local/v1
    kind: MsSQLComposite

  writeConnectionSecretsToNamespace: crossplane-system # this writes the connection secrets listed in the below resources connectionDetails sections to the specified namespace as a combined secret of all resources https://docs.crossplane.io/knowledge-base/guides/connection-details/#connection-secrets-in-compositions
  # Be aware that you can't patch this field (it's in the composition, not in a resource or the composite)
  # The namespace where the user can get his combined secret (the same as this one) is specified implicitly by the claim's namespace if you set the writeConnectionSecretToRef.name in the claim (one could think that this field here is therefore not needed, but it is, without it, there is also no combined secret written to the claim's namespace)

  mode: Pipeline
  pipeline:
    # read the following to understand "functions": https://docs.crossplane.io/latest/concepts/composition-functions
    # observed fields contain the values when the pipeline was invoken
    # desired fields contain the values that are set by this function or the predecessor functions
    # A composed resource is a resource created by a composite resource. Composed resources are usually Crossplane managed resources (MRs), but they can be any kind of Crossplane resource.
    - step: create-a-random-secret
      functionRef:
        name: crossplane-contrib-function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            apiVersion: kubernetes.crossplane.io/v1alpha2
            kind: Object
            metadata:
              annotations:
                gotemplating.fn.crossplane.io/composition-resource-name: "secret" # this name is referenced later on again
            spec:
              providerConfigRef:
                name: provider-kubernetes
              forProvider:
                manifest:
                  apiVersion: v1
                  kind: Secret
                  metadata:
                    name: {{ .observed.composite.resource.spec.claimRef.name }}
                    namespace: {{ .observed.composite.resource.spec.claimRef.namespace }}
                    labels:
                      catalog.cluster.local/kind: {{ .observed.composite.resource.spec.claimRef.kind }}
                      catalog.cluster.local/name: {{ .observed.composite.resource.spec.claimRef.name }}
                      app.kubernetes.io/name: mssql
                      app.kubernetes.io/instance: {{ .observed.composite.resource.spec.claimRef.name }}
                      app.kubernetes.io/version: {{ .observed.composite.resource.spec.version | toString | quote }}
                  stringData:
                    password: {{ dig "resources" "secret" "resource" "spec" "forProvider" "manifest" "stringData" "password" (randAlphaNum 12) .observed }}
            ---
            apiVersion: meta.gotemplating.fn.crossplane.io/v1alpha1
            kind: CompositeConnectionDetails
            {{ if eq $.observed.resources nil }}
            data: {}
            {{ else }}
            data:
              password: {{ dig "resources" "secret" "resource" "spec" "forProvider" "manifest" "stringData" "password" "no value yet" .observed | b64enc }}
            {{ end }}

    - step: automatically-detect-ready-composed-resources
      functionRef:
        name: crossplane-contrib-function-auto-ready

    - step: patch-and-transform
      functionRef:
        name: crossplane-contrib-function-patch-and-transform
      input:
        apiVersion: pt.fn.crossplane.io/v1beta1
        environment: null
        kind: Resources
        patchSets: []
        resources:
          - name: stateful-set
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: provider-kubernetes
                forProvider:
                  manifest:
                    apiVersion: apps/v1
                    kind: StatefulSet
                    metadata:
                      labels:
                        catalog.cluster.local/kind: tbd-kind
                        catalog.cluster.local/name: tbd-name
                        app.kubernetes.io/name: mssql
                        app.kubernetes.io/instance: tbd-name
                        app.kubernetes.io/version: tbd-version
                      name: tbd-name
                      namespace: tbd-namespace
                    spec:
                      selector:
                        matchLabels:
                          catalog.cluster.local/kind: tbd-kind
                          catalog.cluster.local/name: tbd-name
                          app.kubernetes.io/name: mssql
                          app.kubernetes.io/instance: tbd-name
                          app.kubernetes.io/version: tbd-version
                      serviceName: tbd-name
                      template:
                        metadata:
                          labels:
                            catalog.cluster.local/kind: tbd-kind
                            catalog.cluster.local/name: tbd-name
                            app.kubernetes.io/name: mssql
                            app.kubernetes.io/instance: tbd-name
                            app.kubernetes.io/version: tbd-version
                        spec:
                          initContainers:
                          - command:
                            - sh
                            - -c
                            - chown 10001:0 /data
                            image: busybox
                            imagePullPolicy: Always
                            name: init
                            volumeMounts:
                            - mountPath: /data
                              name: data
                              subPath: mssql
                          containers:
                          - image: mcr.microsoft.com/mssql/server:2022-latest # also update the version in the map transform below!
                            imagePullPolicy: Always
                            name: mssql
                            env:
                            - name: ACCEPT_EULA
                              value: "Y"
                            - name: MSSQL_AGENT_ENABLED
                              value: "1"
                            - name: MSSQL_SA_PASSWORD
                              valueFrom:
                                secretKeyRef:
                                  key: password
                                  name: tbd-name
                            ports:
                            - containerPort: 1433
                              protocol: TCP
                            volumeMounts:
                            - mountPath: /var/opt/mssql
                              name: data
                              subPath: mssql
                      volumeClaimTemplates:
                      - metadata:
                          labels:
                            catalog.cluster.local/kind: tbd-kind
                            catalog.cluster.local/name: tbd-name
                            app.kubernetes.io/name: mssql
                            app.kubernetes.io/instance: tbd-name
                            app.kubernetes.io/version: tbd-version
                          name: data
                        spec:
                          accessModes:
                          - ReadWriteOnce
                          resources:
                            requests:
                              storage: 10Gi # patched from claim

            connectionDetails:
              - name: username
                type: FromValue
                value: sa

            # # copy stuff from claim/composite to resource (Release) and the other way around
            patches:

              # get the values for the chart from the claim
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['app.kubernetes.io/instance']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['app.kubernetes.io/version']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['catalog.cluster.local/name']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.kind"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['catalog.cluster.local/kind']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.metadata.name"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.namespace"
                toFieldPath: "spec.forProvider.manifest.metadata.namespace"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.selector.matchLabels['app.kubernetes.io/instance']"
                
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.spec.selector.matchLabels['app.kubernetes.io/version']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.selector.matchLabels['catalog.cluster.local/name']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.kind"
                toFieldPath: "spec.forProvider.manifest.spec.selector.matchLabels['catalog.cluster.local/kind']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.serviceName"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.template.metadata.labels['app.kubernetes.io/instance']"
                
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.spec.template.metadata.labels['app.kubernetes.io/version']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.template.metadata.labels['catalog.cluster.local/name']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.kind"
                toFieldPath: "spec.forProvider.manifest.spec.template.metadata.labels['catalog.cluster.local/kind']"
                
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].env[2].valueFrom.secretKeyRef.name"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].image"
                transforms:
                  - type: map
                    map:
                      "2019": "mcr.microsoft.com/mssql/server:2019-latest"
                      "2022": "mcr.microsoft.com/mssql/server:2022-latest"

              - type: ToCompositeFieldPath
                fromFieldPath: "spec.forProvider.manifest.spec.template.spec.containers[0].image"
                toFieldPath: "spec.version"
                transforms:
                  - type: map
                    map:
                      "mcr.microsoft.com/mssql/server:2019-latest": "2019"
                      "mcr.microsoft.com/mssql/server:2022-latest": "2022"
                      
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.volumeClaimTemplates[0].metadata.labels['app.kubernetes.io/instance']"
                
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.spec.volumeClaimTemplates[0].metadata.labels['app.kubernetes.io/version']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.volumeClaimTemplates[0].metadata.labels['catalog.cluster.local/name']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.kind"
                toFieldPath: "spec.forProvider.manifest.spec.volumeClaimTemplates[0].metadata.labels['catalog.cluster.local/kind']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.size"
                toFieldPath: "spec.forProvider.manifest.spec.volumeClaimTemplates[0].spec.resources.requests.storage"

          - name: service
            base:
              apiVersion: kubernetes.crossplane.io/v1alpha2
              kind: Object
              spec:
                providerConfigRef:
                  name: provider-kubernetes
                forProvider:
                  manifest:
                    apiVersion: v1
                    kind: Service
                    metadata:
                      name: tbd
                      namespace: tbd
                      labels:
                        catalog.cluster.local/kind: tbd
                        catalog.cluster.local/name: tbd
                        app.kubernetes.io/name: mssql
                        app.kubernetes.io/instance: tbd-name
                        app.kubernetes.io/version: tbd-version
                    spec:
                      ports:
                        - name: http
                          protocol: TCP
                          port: 1433
                          targetPort: 1433
                      selector:
                        catalog.cluster.local/kind: tbd
                        catalog.cluster.local/name: tbd
                        app.kubernetes.io/name: mssql
                        app.kubernetes.io/instance: tbd-name
                        app.kubernetes.io/version: tbd-version

            connectionDetails:
              - name: port
                type: FromValue
                value: "1433"

              - name: host
                type: FromFieldPath
                fromFieldPath: "metadata.annotations['host']"

            patches:
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.metadata.name"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.namespace"
                toFieldPath: "spec.forProvider.manifest.metadata.namespace"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.kind"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['catalog.cluster.local/kind']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['catalog.cluster.local/name']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['app.kubernetes.io/instance']"
                
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.metadata.labels['app.kubernetes.io/version']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.kind"
                toFieldPath: "spec.forProvider.manifest.spec.selector['catalog.cluster.local/kind']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.selector['catalog.cluster.local/name']"

              - type: FromCompositeFieldPath
                fromFieldPath: "spec.claimRef.name"
                toFieldPath: "spec.forProvider.manifest.spec.selector['app.kubernetes.io/instance']"
                
              - type: FromCompositeFieldPath
                fromFieldPath: "spec.version"
                toFieldPath: "spec.forProvider.manifest.spec.selector['app.kubernetes.io/version']"

              - type: CombineToComposite
                combine:
                  variables:
                    - fromFieldPath: spec.forProvider.manifest.metadata.name
                    - fromFieldPath: spec.forProvider.manifest.metadata.namespace
                  strategy: string
                  string:
                    fmt: "%s.%s"
                toFieldPath: status.credentials.host
                
              - type: FromCompositeFieldPath
                fromFieldPath: "status.credentials.host"
                toFieldPath: "metadata.annotations['host']"
